image:
  name: docker
services:
  - docker:dind

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      when: always
    - when: never

before_script:
  - apk add make gcc g++ python3 ansible
  - pip3 install docker

variables:
  DOCKER_REGISTRY: "$CI_REGISTRY_IMAGE"
  DOCKER_REGISTRY_USERNAME: "$CI_REGISTRY_USER"
  DOCKER_REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"

  HOT_VERSION: "$CI_COMMIT_SHORT_SHA"

  HOT_DB_HOST: "store"
  HOT_DB_PORT: "5432"
  HOT_DB_NAME: "hot"
  HOT_DB_USER: "hot"
  HOT_DB_PASSWORD: "hot"

stages:
  - build
  - docker-build
  - deploy

build:gateway:image:
  stage: docker-build
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags gateway

build:ui:image:
  stage: docker-build
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags ui

build:ei:image:
  stage: docker-build
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags ei

build:docs:image:
  stage: docker-build
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags docs

build:store:image:
  stage: docker-build
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags store

build:core-binary:
  stage: build
  image: haskell:8.6.5
  before_script:
    - mkdir -p $CI_PROJECT_DIR/.stack-root
  variables:
    STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"
  cache:
    key: default
    paths:
      - .stack-root
      - ./hot-core/.stack-work
  script:
    - apt-get update && apt-get install libpq-dev upx -y
    - cd hot-core
    - echo $PWD && stack build --copy-bins --local-bin-path ./build
    - cd build
    - upx hot
  artifacts:
    paths:
      - ./hot-core/build/

build:core:image:
  stage: docker-build
  needs:
    - "build:core-binary"
  script:
    - ansible-playbook --inventory=ansible/inventories/lab.channikhabra.com ./ansible/build.yml --tags core

build:cli:image:
  stage: docker-build
  variables:
    IMAGE: "${CI_REGISTRY_IMAGE}/hot-cli:${HOT_VERSION}"
  script:
    - cd cli
    - echo "CREATING: $IMAGE"
    - docker build . -t $IMAGE  -f Dockerfile-prod
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" "${CI_REGISTRY}" --password-stdin
    - docker push $IMAGE

deploy:lab:
  stage: deploy
  before_script:
    - apk add make gcc g++ python3 ansible openssh-client
    - pip3 install docker
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan lab.channikhabra.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    - ansible-playbook --inventory=./ansible/inventories/lab.channikhabra.com ./ansible/deploy.yml --skip-tags post-launch

  environment:
    name: lab
    url: lab.channikhabra.com
