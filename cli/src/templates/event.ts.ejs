import { EventI } from '@src/events';
import { ObjectSchema } from 'yup';
// tslint:disable-next-line:no-duplicate-imports
import * as yup from 'yup';

interface EventPayload {
}

interface EventSchema {
  [version: string]: ObjectSchema;
}

class <%= props.className %> implements EventI {
  static type = '<%= props.eventName %>';
  static schema: EventSchema = {
    v1: yup.object({}),
  };
  static versions = Object.keys(<%= props.className %>.schema);

  type = <%= props.className %>.type;
  public id ?: string;

  constructor(public version: string, public payload: EventPayload) { }

  async validate() {
    if (!<%= props.className %>.versions.find((v) => v === this.version)) {
      throw new Error(
        `UnsupportedVersion: Supported versions [ ${<%= props.className %>.versions
          // tslint:disable-next-line:prefer-template
          .map((v) => '"' + v + '"')
          .join(', ')} ]`,
      );
    }

    const schema: ObjectSchema = <%= props.className %>.schema[this.version];

    return schema.validate(this.payload).then(() => undefined);
  }

  toJSON() {
    return {
      id: this.id,
      type: this.type,
      version: this.version,
      payload: this.payload,
    };
  }
}

export default <%= props.className %>;
